def BOOLEAN = "boolean"
def STRING = "String"
def INT = "int"
def TRUE = "true"
def FALSE = "false"
def DEBUG_MODE = "DEBUG_MODE"

ext.BOOLEAN = BOOLEAN
ext.STRING = STRING
ext.INT = INT
ext.TRUE = TRUE
ext.FALSE = FALSE
ext.DEBUG_MODE = DEBUG_MODE


def API_KEY = 'api_key'
ext.API_KEY = API_KEY

def API_BASE = 'api_base'
ext.API_BASE = API_BASE

ext.getCustomProperty = { key ->
    Properties props = new Properties()
    def propFile = file ('../config/config.properties')
    if(propFile.canRead()){
        props.load(new FileInputStream(propFile))
        if(props != null && props.containsKey(key)){
            println 'My key ' + key + '::' + props[key]
            return props[key]
        }else{
            println 'MyHR.properties ' + key + ' found but some entries are missing'
        }
    }else{
        println 'MyHR.properties ' + key + ' not found'
    }
    return null
}

ext.generateSignature = { ->
    Properties props = new Properties()
    def propFile = file ('../secureFolder/key.properties')
    if(propFile.canRead()){
        props.load(new FileInputStream(propFile))
        if(props != null &&
                props.containsKey('STORE_FILE') &&
                props.containsKey('STORE_PASSWORD') &&
                props.containsKey('KEY_ALIAS') &&
                props.containsKey('KEY_PASSWROD')
        ){
            android.signingConfigs.defaultSign.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.defaultSign.storePassword = file(props['STORE_PASSWORD'])
            android.signingConfigs.defaultSign.keyAlias = file(props['KEY_ALIAS'])
            android.signingConfigs.defaultSign.keyPassword = file(props['KEY_PASSWORD'])
        }else{
            println 'key.properties found but some entries are missing'
            android.buildTypes.debug.signingConfig = null
        }
    }else{
        println 'key.properties not found'
        android.buildTypes.release.signingConfig = null
    }
}

ext.addRepos = { RepositoryHandler handler ->
    handler.google()
    handler.jcenter()

}